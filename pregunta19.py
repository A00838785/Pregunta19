# -*- coding: utf-8 -*-
"""Pregunta19.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CwTqhacEv4ruhdddUElzjTI4L5cBh6Q8
"""

# Gujarati Q22.25 Treasury Bill Time Series Analysis
# Upload and analyze GS3M and GS6M Treasury bill rates

# Step 1: Install & import packages (skip if already installed)
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import adfuller
from statsmodels.api import OLS, add_constant
from statsmodels.tsa.api import VAR
import re
import io
from google.colab import files
import warnings
warnings.filterwarnings("ignore")

# Step 2: Upload the TXT file
uploaded = files.upload()
filename = list(uploaded.keys())[0]

# Step 3: Parse the file
with open(filename, "r") as file:
    raw_data = file.readlines()

data_lines = []
for line in raw_data:
    if re.match(r'^\d{4}:\d{2}', line.strip()):
        parts = re.split(r'\s+', line.strip())
        try:
            date = parts[0]
            gs3m = float(parts[1])
            gs6m = float(parts[2])
            data_lines.append((date, gs3m, gs6m))
        except:
            continue

# Step 4: Format to DataFrame
df = pd.DataFrame(data_lines, columns=['Date', 'GS3M', 'GS6M'])
df['Date'] = pd.to_datetime(df['Date'], format='%Y:%m')
df.set_index('Date', inplace=True)

# Step 5: Plot both series
plt.figure(figsize=(14,6))
plt.plot(df['GS3M'], label='3-Month TB Rate (GS3M)')
plt.plot(df['GS6M'], label='6-Month TB Rate (GS6M)')
plt.title('3M vs 6M Treasury Bill Rates (1982–2001)')
plt.xlabel('Date')
plt.ylabel('Rate (%)')
plt.legend()
plt.grid(True)
plt.show()

# Step 6: ADF Test Function
def adf_test(series, name):
    result = adfuller(series)
    print(f"\nADF Test: {name}")
    print(f"  ADF Statistic: {result[0]:.4f}")
    print(f"  p-value: {result[1]:.4f}")
    print("  Critical Values:")
    for key, val in result[4].items():
        print(f"    {key}: {val:.4f}")

# Step 7: Check stationarity
adf_test(df['GS3M'], 'GS3M (Level)')
adf_test(df['GS6M'], 'GS6M (Level)')

# First differences
df_diff = df.diff().dropna()
adf_test(df_diff['GS3M'], 'GS3M (1st Diff)')
adf_test(df_diff['GS6M'], 'GS6M (1st Diff)')

# Step 8: Engle-Granger Cointegration Test
X = add_constant(df['GS3M'])
model = OLS(df['GS6M'], X).fit()
resid = model.resid
adf_test(resid, 'Residuals from GS6M ~ GS3M (Engle-Granger)')

# Step 9: VAR Lag Selection on Differenced Data
model_var = VAR(df_diff)
lag_selection = model_var.select_order(maxlags=12)
print("\nSuggested Lag Order:")
print(lag_selection.summary())

# Step 10: Guidance
print("\nModeling Guidance:")
print("If both series are non-stationary but cointegrated → VECM")
print("If non-stationary and NOT cointegrated → VAR on first differences")
print("If stationary → VAR in levels")